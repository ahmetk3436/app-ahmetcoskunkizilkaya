name: CI/CD Pipeline

on:
  push:
    branches:
      - 'feature/**'
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore eShopOnWeb.sln

      - name: Build
        run: dotnet build eShopOnWeb.sln --no-restore --configuration Release

      - name: Test
        run: dotnet test eShopOnWeb.sln --no-build --verbosity normal --configuration Release

  sast:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            secret/data/cicd SONAR_TOKEN | SONAR_TOKEN;
            secret/data/cicd SONAR_HOST | SONAR_HOST_URL;

      - name: Run Semgrep with JSON output
        run: |
          pip install semgrep
          semgrep ci --json --json-output=semgrep.json
        continue-on-error: true

      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: semgrep.json

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Debug SonarQube Configuration
        run: |
          echo "SonarQube Host URL: ${{ env.SONAR_HOST_URL }}"
          echo "SonarQube Token (first 10 chars): ${SONAR_TOKEN:0:10}..."
          curl -f "${{ env.SONAR_HOST_URL }}/api/server/version" || echo "SonarQube server not accessible"
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}

      - name: Run SonarScanner
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool install --tool-path ./.sonar/scanner dotnet-sonarscanner --version 10.3.0
          export PATH="$PATH:${{ github.workspace }}/.sonar/scanner"
          dotnet-sonarscanner begin /k:"eShopOnWeb" /d:sonar.host.url="${{ env.SONAR_HOST_URL }}" /d:sonar.token="${{ env.SONAR_TOKEN }}" /d:sonar.qualitygate.wait=false
          dotnet restore eShopOnWeb.sln
          dotnet build eShopOnWeb.sln --no-restore
          dotnet-sonarscanner end /d:sonar.token="${{ env.SONAR_TOKEN }}"
        continue-on-error: true

  docker:
    runs-on: ubuntu-latest
    needs: sast
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            secret/data/cicd HARBOR_PASSWORD | HARBOR_PASSWORD;
            secret/data/cicd HARBOR_USERNAME | HARBOR_USERNAME;
            secret/data/cicd GH_PAT | GH_PAT;

      - name: Set image tag
        id: vars
        run: echo "image_tag=$(echo ${{ github.ref_name }} | tr '/' '-')-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Login to Harbor
        uses: docker/login-action@v3
        with:
          registry: harbor2.ahmetcoskunkizilkaya.com
          username: ${{ env.HARBOR_USERNAME }}
          password: ${{ env.HARBOR_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/Web/Dockerfile
          push: true
          tags: harbor2.ahmetcoskunkizilkaya.com/app-ahmetcoskunkizilkaya/eshoponweb:${{ steps.vars.outputs.image_tag }}

  manifest-update-dev:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            secret/data/cicd GH_PAT | GH_PAT;

      - name: Checkout manifests
        uses: actions/checkout@v4
        with:
          repository: 'ahmetk3436/manifest-ahmetcoskunkizilkaya'
          token: ${{ env.GH_PAT }}
          path: 'manifest-ahmetcoskunkizilkaya'

      - name: Set image tag
        id: vars
        run: echo "image_tag=$(echo ${{ github.ref_name }} | tr '/' '-')-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Install kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Update image tag (dev)
        working-directory: manifest-ahmetcoskunkizilkaya/overlays/dev
        run: kustomize edit set image harbor2.ahmetcoskunkizilkaya.com/app-ahmetcoskunkizilkaya/eshoponweb:${{ steps.vars.outputs.image_tag }}

      - name: Commit & Push manifests
        run: |
          cd manifest-ahmetcoskunkizilkaya
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git commit -am "Update image to ${{ steps.vars.outputs.image_tag }}"
          git push

  dast:
    runs-on: ubuntu-latest
    needs: manifest-update-dev
    if: github.ref != 'refs/heads/main'
    steps:
      - name: OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://dev.app.com'

  manifest-update-prod:
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: http://prod.app.com
    steps:
      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            secret/data/cicd GH_PAT | GH_PAT;

      - name: Checkout manifests
        uses: actions/checkout@v4
        with:
          repository: 'ahmetk3436/manifest-ahmetcoskunkizilkaya'
          token: ${{ env.GH_PAT }}
          path: 'manifest-ahmetcoskunkizilkaya'

      - name: Set image tag
        id: vars
        run: echo "image_tag=main-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Install kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Update image tag (prod)
        working-directory: manifest-ahmetcoskunkizilkaya/overlays/prod
        run: kustomize edit set image harbor2.ahmetcoskunkizilkaya.com/app-ahmetcoskunkizilkaya/eshoponweb:${{ steps.vars.outputs.image_tag }}

      - name: Commit & Push manifests
        run: |
          cd manifest-ahmetcoskunkizilkaya
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git commit -am "Update image to ${{ steps.vars.outputs.image_tag }}"
          git push

  merge:
    runs-on: ubuntu-latest
    needs: dast
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            secret/data/cicd GH_PAT | GH_PAT;

      - name: Merge feature branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_PAT }}
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const { repo, owner } = context.repo;
            let pull_number;
            const prs = await github.rest.pulls.list({
              owner,
              repo,
              head: `${owner}:${branch}`,
              base: 'main',
              state: 'open'
            });
            if (prs.data.length > 0) {
              pull_number = prs.data[0].number;
            } else {
              const pr = await github.rest.pulls.create({
                owner,
                repo,
                head: branch,
                base: 'main',
                title: `Merge ${branch} into main`,
                body: 'Automated merge after successful CI/CD'
              });
              pull_number = pr.data.number;
            }
            await github.rest.pulls.merge({
              owner,
              repo,
              pull_number,
              merge_method: 'squash'
            });
