name: CI/CD Pipeline

on:
  push:
    branches:
      - 'feature/**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

  sast:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Import Secrets from Vault
      uses: hashicorp/vault-action@v2
      with:
        url: ${{ secrets.VAULT_ADDR }}
        token: ${{ secrets.VAULT_TOKEN }}
        secrets: |
          secret/data/ci sonarqube_token | SONAR_TOKEN;
          secret/data/ci sonarqube_host | SONAR_HOST_URL;
          secret/data/ci semgrep_token | SEMGREP_APP_TOKEN;

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        publishToken: ${{ env.SEMGREP_APP_TOKEN }}

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

  docker:
    runs-on: ubuntu-latest
    needs: sast

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Import Secrets from Vault
      uses: hashicorp/vault-action@v2
      with:
        url: ${{ secrets.VAULT_ADDR }}
        token: ${{ secrets.VAULT_TOKEN }}
        secrets: |
          secret/data/ci harbor_password | HARBOR_PASSWORD;
          secret/data/ci harbor_username | HARBOR_USERNAME;
          secret/data/ci sonarqube_token | SONAR_TOKEN;
          secret/data/ci gh_pat | GH_PAT;
          secret/data/ci sonarqube_host | SONAR_HOST_URL;
          secret/data/ci semgrep_token | SEMGREP_APP_TOKEN;

    - name: Login to Harbor
      uses: docker/login-action@v2
      with:
        registry: harbor.ahmetcoskunkizilkaya.com
        username: ${{ env.HARBOR_USERNAME }}
        password: ${{ env.HARBOR_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: harbor.ahmetcoskunkizilkaya.com/app-ahmetcoskunkizilkaya:${{ github.sha }}

  deploy-dev:
    runs-on: ubuntu-latest
    needs: docker

    steps:
    - name: Import Secrets from Vault
      uses: hashicorp/vault-action@v2
      with:
        url: ${{ secrets.VAULT_ADDR }}
        token: ${{ secrets.VAULT_TOKEN }}
        secrets: |
          secret/data/ci gh_pat | GH_PAT;
    - name: Checkout manifests
      uses: actions/checkout@v3
      with:
        repository: 'ahmetcoskunkizilkaya/manifest-ahmetcoskunkizilkaya'
        token: ${{ env.GH_PAT }}
        path: 'manifest-ahmetcoskunkizilkaya'

    - name: Update image tag
      run: |
        cd manifest-ahmetcoskunkizilkaya/overlays/dev
        kustomize edit set image harbor.ahmetcoskunkizilkaya.com/app-ahmetcoskunkizilkaya:${{ github.sha }}
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git commit -am "Update image to ${{ github.sha }}"
        git push

  dast:
    runs-on: ubuntu-latest
    needs: deploy-dev

    steps:
    - name: OWASP ZAP Scan
      uses: zaproxy/action-full-scan@v0.4.0
      with:
        target: 'http://dev.app.com'

  deploy-prod:
    runs-on: ubuntu-latest
    needs: dast
    environment:
      name: production
      url: http://prod.app.com

    steps:
    - name: Import Secrets from Vault
      uses: hashicorp/vault-action@v2
      with:
        url: ${{ secrets.VAULT_ADDR }}
        token: ${{ secrets.VAULT_TOKEN }}
        secrets: |
          secret/data/ci gh_pat | GH_PAT;
    - name: Checkout manifests
      uses: actions/checkout@v3
      with:
        repository: 'ahmetcoskunkizilkaya/manifest-ahmetcoskunkizilkaya'
        token: ${{ env.GH_PAT }}
        path: 'manifest-ahmetcoskunkizilkaya'

    - name: Update image tag
      run: |
        cd manifest-ahmetcoskunkizilkaya/overlays/prod
        kustomize edit set image harbor.ahmetcoskunkizilkaya.com/app-ahmetcoskunkizilkaya:${{ github.sha }}
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git commit -am "Update image to ${{ github.sha }}"
        git push

  merge:
    runs-on: ubuntu-latest
    needs: deploy-prod

    steps:
    - name: Import Secrets from Vault
      uses: hashicorp/vault-action@v2
      with:
        url: ${{ secrets.VAULT_ADDR }}
        token: ${{ secrets.VAULT_TOKEN }}
        secrets: |
          secret/data/ci gh_pat | GH_PAT;
    - name: Merge feature branch
      uses: actions/github-script@v6
      with:
        github-token: ${{ env.GH_PAT }}
        script: |
          const branch = context.ref.replace('refs/heads/', '');
          const { repo, owner } = context.repo;
          // Find or create PR
          let pull_number;
          const prs = await github.rest.pulls.list({
            owner,
            repo,
            head: `${owner}:${branch}`,
            base: 'main',
            state: 'open'
          });
          if (prs.data.length > 0) {
            pull_number = prs.data[0].number;
          } else {
            const pr = await github.rest.pulls.create({
              owner,
              repo,
              head: branch,
              base: 'main',
              title: `Merge ${branch} into main`,
              body: 'Automated merge after successful CI/CD'
            });
            pull_number = pr.data.number;
          }
          // Merge
          await github.rest.pulls.merge({
            owner,
            repo,
            pull_number,
            merge_method: 'squash'
          });